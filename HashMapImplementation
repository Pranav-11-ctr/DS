package hashMapImpl;

import java.util.ArrayList;
import java.util.LinkedList;




public class HashMapImpl1 {
	static class HashMap<K,V>
	{
		private  class Node
		{
			K key;
			V value;
			
			public Node(K key,V value)
			{
				this.key=key;
				this.value=value;
			}
		}
		private int n;//size of linkedlist at index
		private int N;//size of an array
		
		//private int size,n,N;//n
		public LinkedList<Node> buckets[];//N =buckets.length
		
		@SuppressWarnings("unchecked")
		public HashMap()
		{
			this.N=4;
			this.buckets=new LinkedList[4];
			for(int i=0;i<4;i++)
			{
				this.buckets[i]=new LinkedList<>();
			}
		}
		
		private int hashFunction(K key)
		{
			int hc=key.hashCode();
			return Math.abs(hc)%buckets.length;
		}
		
		private int searchInLL(K key,int bi)
		{
			LinkedList<Node> ll=buckets[bi];
			int dataIndex=0;
			
			for(int i=0;i<ll.size();i++)
			{
				Node node =ll.get(i);
				if(node.key==key)
				{
					return dataIndex;
				}
				dataIndex++;
			}
			return -1;
			
		}
		
		
		public void rehash()
		{
			LinkedList<Node> oldBuckets[]=buckets;
			buckets=new LinkedList[N*2];
			
			N=N*2;
			
			for(int i=0;i<buckets.length;i++)
			{
				buckets[i]=new LinkedList<>();
			}
			
			//Inserting oldbuckets value in new created bucket
			for(int i=0;i<oldBuckets.length;i++)
			{
				LinkedList<Node> ll=oldBuckets[i];
				//Linked List of each index came 
				//now insert in new linked list
				for(int j=0;j<ll.size();j++)
				{
					Node node =ll.remove();
					put(node.key,node.value);
				}
			}
			
			
		}
		
		
		public void put(K key,V value)
		{
			int bucketIndex=hashFunction(key);
			int dataIndex=searchInLL(key,bucketIndex);
			
			if(dataIndex!=-1)
			{
				Node node=buckets[bucketIndex].get(dataIndex);
				node.value=value;
			}
			else
			{
				buckets[bucketIndex].add(new Node(key,value));
				n++;
			}
			
			
			double totalNodeBySizeOfArray=(double)n/N;
			if(totalNodeBySizeOfArray>2.0)
			{
				rehash();
			}
			
			
			
		}
		
		public boolean containsKey( K key)
		{
			int bucketIndex=hashFunction(key);
			int dataAtIndexInLL=searchInLL(key, bucketIndex);
			
			if(dataAtIndexInLL==-1)
			return false;
			else
				return true;
		}
		public V remove(K key)
		{
			return null;
		}
		public V get(K key)
		{
			int bucketIndex=hashFunction(key);
			int dataAtIndexInLL=searchInLL(key, bucketIndex);
			
			if(dataAtIndexInLL==-1)
			return null;
			else
			{
				Node node=buckets[bucketIndex].get(dataAtIndexInLL);
				return node.value;
			}
		}
		
		public ArrayList<K> keySet()
		{
//			if(buckets.length==0)
//				return null;
//			else
//			{
				ArrayList<K> list=new ArrayList<>();
				for(int i=0;i<buckets.length;i++)
				{
					LinkedList<Node> ll=buckets[i];
					for(int j=0;j<ll.size();j++)
					{
						Node node=ll.get(j);
						list.add(node.key);
					}
				}
				return list;
//			}
		}
		
		public boolean isEmpty()
		{
			return n==0;
		}
		
	}

	public static void main(String[] args) {
		
		HashMap<String,Integer> hm=new HashMap<>();
		System.out.println(hm.isEmpty());
		hm.put("Pranav", 12);
		hm.put("Mysore", 10);;
		hm.put("Hari",9);
		System.out.println(hm.get("Hari"));
		System.out.println(hm.get("Mysore"));
		System.out.println(hm.containsKey("Hari"));
		System.out.println(hm.containsKey("Murari"));
		ArrayList<String> keySet = hm.keySet();
		for( String s: keySet)
		{
			System.out.print(s+" ");
		}
		System.out.println(hm.isEmpty());

	}

}
