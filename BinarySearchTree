package bst;

import org.w3c.dom.Node;

public class ConstructBst {
	
	public static class Node
	{
		int data;
		Node left;
		Node right;
		
		public Node(int data,Node left,Node right)
		{
			this.data=data;
			this.left=left;
			this.right=right;
		}
	}
	
	public static Node construct(int[] arr,int lo,int hi)
	{
		if(lo>hi)
			return null;
		
		int mid=(lo+hi)/2;
		int data=arr[mid];
		Node lc=construct(arr,lo,mid-1);
		Node rc=construct(arr,mid+1,hi);
		
		Node node=new Node(data,lc,rc);
		return node;
	}
	
	public static void display(Node node)
	{
		if(node==null)
			return;
		
		String str="";
		str+= node.left==null?" . ":node.left.data+"";
		str+="<-"+node.data+"->";
		str+=node.right==null?" . ":node.right.data;
		System.out.println(str);
		
		display(node.left);
		display(node.right);
		
		
	}
	
	public static int size(Node node)
	{
		if(node==null)
		{
			return 0;
		}
		
		int ls=size(node.left);
		int rs=size(node.right);
		int tempSize=ls+rs+1;
		
		return tempSize;
	}
	
	public static int sum(Node node)
	{
		if(node==null)
			return 0;
		
		int leftSum=sum(node.left);
		int rightSum=sum(node.right);
		int tempTotSum=leftSum+rightSum+node.data;
		
		return tempTotSum;
	}
	
	public static int max(Node node)
	{
		if(node.right!=null)
			return max(node.right);
		else
			return node.data;
	}
	
	public static int min(Node node)
	{
		if(node.left!=null)
			return min(node.left);
		else
			return node.data;
	}
	
	
	public static boolean find(Node node,int data)
	{
		if(node==null)
			return false;
		
		
		if(data>node.data)
			return find(node.right,data);
		else if(data<node.data)
			return find(node.left,data);
		else
			return true;
	}
	
	
	public static Node add(Node root,int data)
	{
		if(root==null)
		{
			Node node=new Node(data,null,null);
			return node;
		}
		
		
		if(data>root.data)
		{
			root.right=add(root.right,data);
		}
		else if(data<root.data)
			root.left=add(root.left,data);
		else
		{
			//when data is same
		}
		return root;
	}
	
	public static Node remove(Node node,int data)
	{
		if(data>node.data)
		{
			node.right=remove(node.right,data);
		}
		else if(data<node.data)
		{
			node.left=remove(node.left,data);
		}
		else
		{
			//data agar same hai node data ke jaisa
			if(node.left!=null && node.right!=null)
			{
				//both left and right child available
				int max=max(node.left);
				node.data=max;
				node.left=remove(node.left,max);
				return node;
				
			}
			else if(node.left!=null)
			{
				//only left child available
				return node.left;
				
			}
			else if(node.right!=null)
			{
				//only right child available
				return node.right;
			}
			else
			{
				//no child available
				return null;
				
			}
			
		}
		return node;
	}
	
	
	static int sum=0;
	public static void replaceNodeWithSumOfLargerElements(Node node)
	{
		//matlab jis node pe hai usse bda jitna bhi node hai uska sum
		
		//we know that inorder in Left node right which is ascending order in bst
		
		//to count this method we traverse right then node then left
		
		//initialize sum =0
		//take value of node .data into a separte variable
		//replace with node data with sum
		//add sum+=that initial node.val
		
		if(node==null)
			return;
		replaceNodeWithSumOfLargerElements(node.right);
		
		int tempNodeData=node.data;
		node.data=sum;
		sum+=tempNodeData;
		
		replaceNodeWithSumOfLargerElements(node.left);
		
		
	}
	
	
	public static int lowestCommonAncestor(Node node,int data1,int data2)
	{
		if(data1<node.data && data2<node.data)
		{
			return lowestCommonAncestor(node.left, data1, data2);
		}
		else if(data1>node.data && data2>node.data)
		{
			return lowestCommonAncestor(node.right, data1, data2);
		}
		else
		{
			//matlab wo case jisme ek data node.data se bda hoga oe ek chhota 
			//iska matlab done data isi common point se bichdega so lowest common ancestor yahin hoga
			
			return node.data;
		}
	}
	
	public static void inRange(Node node,int data1,int data2)
	{
		if(data1<node.data && data2<node.data)
		{
			inRange(node.left,data1,data2);
		}
		else if(data1>node.data && data2>node.data)
		{
			inRange(node.right, data1, data2);
		}
		else
		{
			//jab ek bda ho ek chota ho
			//hmko inorder me print karna chahiye  jisse ascending order me print ho
			
			inRange(node.left, data1, data2);
			System.out.println(node.data);
			inRange(node.right, data1, data2);
			
		}
	}
	
	public static void targetSumPair(Node root,Node node,int tar)
	{
		if(node==null)
			return;
		
		
		targetSumPair(root, node.left, tar);
		
		int complement=tar-node.data;
		if(complement>node.data)
		{
			//because agar complement agar node.data se chhota hoga then wo tree me hoga hi nahi
			if(find(root,complement))
			{
				System.out.println(node.data+" "+complement);
			}
		}
		targetSumPair(root, node.right, tar);
	}

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		int[] arr= {12,25,30,37,40,50,60,62,70,75,87,90};
		Node root=construct(arr,0,arr.length-1);
//		display(root);
//		System.out.println();
//		System.out.println(sum(root));
//		System.out.println();
//		System.out.println(size(root));
//		System.out.println();
//		System.out.println(max(root));
//		System.out.println();
//		System.out.println(min(root));
//		System.out.println();
//		System.out.println(find(root,88));
//		
//		System.out.println();
//		add(root,60);
//		display(root);
//		
//		System.out.println();
//		remove(root,25);
		display(root);
		
//		replaceNodeWithSumOfLargerElements(root);
//		display(root);
		
		//System.out.println(lowestCommonAncestor(root, 87, 90));
		
		targetSumPair(root, root, 100);

	}

}
